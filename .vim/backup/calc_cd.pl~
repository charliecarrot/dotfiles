# !/usr/bin/perl

# Program:	  Interactive Calculator
# Filename:	  calc.pl
# Class:	  CSC 442 - Organization of Progamming Languages
# Instructor: Dr. Dave Cook

use feature ':5.10';
use strict;
use warnings;

my @keywords = (
	"load",
	"mem",
	"print",
	"stop"
	);

my %variables;

print ">READY FOR INPUT\n";

# Main Loop
my $inputStr;
while ($inputStr ne "stop\n")
{
	# Obtain user command
	print ">";
	$inputStr = <STDIN>;
	chomp $inputStr;

	my @input = split(/ /, $inputStr);

	# Process user input
	if ($input[0] =~ /^load$/i) 
	{
		# LOAD Operation
		# Calls mem() to reserve space for 
		# variable, and then prompts user for
		# the value contained in variable.

		load($input[1]);
	}
	elsif ($input[0] =~ /^mem$/i)
	{
		# MEM Operation
		# Takes name of variable from
		# $inputStr and checks if it 
		# exists already. If not, reserves
		# space for variable.
		
		mem($input[1]);
	}
	elsif ($input[0] =~ /^print$/i)
	{
		# DISPLAY Operation
		# Prints the value of a given variable
		# to the screen.

		display($input[1]);
	}
	elsif (exists $variables{$input[0]})
	{
		# If input is of the form:
		# var = a + 2

		if ($input[1] eq '=')
		{
			# evaluateuate rhs
			# Split off rest of @input array after 1
			# and send to Ryan's function

			my @expression = splice(@input, 2);

			$variables{$input[0]} = evaluate(@expression);
		}

	}
	elsif ($input[0] =~ /^stop$/i)
	{
		# STOP
		# Exits the calc program.
	}
	else
	{
		# UNKNOWN COMMAND
		print ("Unknown input.\n");
	}

} # end while

#Create and store variable name and value
sub load
{
	# Grab name of user-defined variable and make uppercase
    my $name = shift; 
    $name = uc $name;
    
    # Reserve space for variable (in %variables)
    if(mem($name))
	{

		#prompt and store value
		print(">ENTER VALUE FOR $name ");
		my $value = <STDIN>;
		if (!isNumber($value))
		{
			print(">NOT A NUMBER\n");
			return 0;    
		}
		$variables{$name} = $value;
	}

    return 1;
}#end load


#Create a place in memory for a variable
sub mem
{
    my $name = shift; #store variable name
    if(!isKeyword($name))
    {
        #checks if variable name starts with letter
        unless ($name =~ /^[a-z]*$/i)
        {
            print(">MUST START VARIABLE WITH LETTER\n");
            return 1;
        }    
        
        if(exists $variables{$name}) 
        {
            print(">VARIABLE IN USE\n");
        }
        else
        {    
            $variables{$name} = '~'; 
			#print(">VALUE ~ STORED\n");
        }
    }#end if
    else
    {
        print(">VARIABLE NAME IS KEYWORD\n");
        return 0; 
    }    

    return 1; 
} # end mem()

#Determine if element is keyword
sub isKeyword
{
    my $name = shift;
    foreach my $e (@keywords)
    {
        if ($e eq $name)
        {
            return 1; #true
        }
    }
    return 0; #false
}# end isKeyword

sub display
{
	my $identifier = shift;

	unless ($variables{$identifier} eq '~')
	{
		print("VALUE OF $identifier IS $variables{$identifier}\n");
	}
	else
	{
		print("VARIABLE HAS NOT BEEN ASSIGNED VALUE.\n");
	}
} # end display()

sub evaluate
{
	# ERRORS from popping empty stack
	# and not checking for empty stacks
	my @array = @_;
	my @valuestack;
	my @operatorstack;
	my ($operator, $lhs, $rhs, $result);
	
	my %prec;
	$prec{'*'} = 3;
	$prec{'/'} = 3;
	$prec{'+'} = 2;
	$prec{'-'} = 2;
	$prec{'('} = 1;

	foreach my $element (@array)
	{
		if (isNumber($element))
		{
			# If element is number
			# Push onto valuestack
			push @valuestack, $element;
		}
		elsif (exists $variables{$element})
		{
			# If element is variable
			# Push value onto valuestack
			push @valuestack, $variables{$element}; 
		}
		elsif ($element eq '(')
		{
			# If element is left paren
			# Push element onto operator stack
			push @operatorstack, $element;
		}
		elsif ($element eq ')')
		{
			# If element is right paren
			# Pop values and operators from
			# stacks until left paren
			while($operatorstack[-1] ne '(')
			{
				$operator = pop @operatorstack;
				$rhs = pop @valuestack;
				$lhs = pop @valuestack;

				$result = applyOperator($operator, $lhs, $rhs);
				
				push @valuestack, $result;
			} # end while

	}
	elsif ($element =~ /[+\-\/*\^]/)
	{
		# If element is an operator
		while(@operatorstack &&
			$prec{$operatorstack[-1]} >= $prec{$element})
		{
			$operator = pop @operatorstack;
			$rhs = pop @valuestack;
			$lhs = pop @valuestack;

			$result = applyOperator($operator, $lhs, $rhs);

			push @valuestack, $result;
		} # end while

		# Once operator has precedence less than
		# operator on operator stack, push onto stack
		push @operatorstack, $element;
	}
} # end foreach

while(@operatorstack)
{
	$operator = pop @operatorstack;
	$rhs = pop @valuestack;
	$lhs = pop @valuestack;

	$result = applyOperator($operator, $lhs, $rhs);

	push @valuestack, $result;
}

$result = pop @valuestack;

return $result;
	
}#end evaluate

sub isNumber
{
	my $str = shift;

	return 1 if ($str =~ /^[0-9,.E]+$/);
	return undef;
} # end isNumber()

sub applyOperator
{
	($operator, $lhs, $rhs) = @_;
	print "$operator, $lhs, $rhs";

	# PULL OUT INTO SUBROUTINE
	if ($operator eq '+')
	{
		$result = $lhs + $rhs;
	}
	elsif ($operator eq '-')
	{
		$result = $lhs - $rhs;
	}
	elsif ($operator eq '*')
	{
		$result = $lhs * $rhs;
	}
	elsif ($operator eq '/')
	{
		$result = $lhs / $rhs;
	}

	return $result;
}
