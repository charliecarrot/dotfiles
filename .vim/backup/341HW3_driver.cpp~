//////////////////////////////////////////////////////////
// Name: Charles Davis
// Date: 21 March 2019
// File Name: 341HW3_driver.cpp
// Description: This program uses a semaphore to restrict
//				thread access to a function.
//
//////////////////////////////////////////////////////////
// use -lpthread flag

#include <iostream>
#include <unistd.h>
#include <sys/wait.h>
#include <pthread.h>
#include <cstdlib>
#include <cstdio>

#include "341_Semaphore.h"

using namespace std;

// Struct to hold arguments passed by pthread_create
struct argStruct
{
	long id;
	Semaphore* s;
};

//Function that the threads must execute inside
void* Club(void* arguments)
{
	long id = 0;
	Semaphore* s;

	struct argStruct* args = (struct argStruct*)arguments;

	if (args != 0)
	{
		id = args->id;
		s = args->s;
		delete args;
		args = 0;
	}

	s->down(id); // Decrement semaphore val; wait if val <= 0

	printf("Thread %ld entering club.\n", id);
	sleep(rand()%5 + 5);
	printf("Thread %ld done partying.\n", id);

	s->up(); // Increment semaphore val; signal unblock
}

int main(int argc, char** argv) 
{
	if (argc < 5 || argc > 5)
	{
		cout << "\nNumber of total or allowed threads incorrectly specified.";
		cout << "\nPlease run the program again with only the following required flags:";
		cout << "\n    -t <num> (specifies the number of total threads)";
		cout << "\n    -c <num> (number of threads allowed in at a time)\n";
	}
	else
	{
		int NUM_PEEPS = 1;
		int MAX_PEEPS = 1;

		for (int i = 1; i < argc; i++)
		{
			// Get information from commandline flags
			if (argv[i][0] == '-')
			{
				if (argv[i][1] == 't')
				{
					NUM_PEEPS = atoi(argv[i+1]);
				}
				else if (argv[i][1] == 'c')
				{
					MAX_PEEPS = atoi(argv[i+1]);
				}
			}
		}

		// Create array to store ID of created threads
		pthread_t threads[NUM_PEEPS];

		// Initialize semaphore object with max threads
		Semaphore s(MAX_PEEPS);
		
		// Use this to pass two arguments into pthread_create
		struct argStruct* args = 0;

		//Have each person go into the club (if room) and party hard
		for(int i = 0; i < NUM_PEEPS; i++)
		{
			args = new struct argStruct(); // Each thread gets its own copy
			args->id = i;
			args->s = &s;
			pthread_create(&threads[i], NULL, Club, args);
		}

		for (int i = 0; i < NUM_PEEPS; i++)
		{
			// makes sure main thread doesn't exit if other threads are running
			pthread_join(threads[i], NULL);
		}

		pthread_exit(NULL); // kill main thread
	}

	return 0;
}
